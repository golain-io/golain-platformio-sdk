/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.8-dev */

#ifndef PB_MAIN_PROTOS_DATA_PROTOS_REM_DP_PB_H_INCLUDED
#define PB_MAIN_PROTOS_DATA_PROTOS_REM_DP_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _rem {
    float acVolt; /* AC Voltage */
    float acAmp; /* AC Current */
    float acWatt; /* AC Power */
    float PowerF; /* Power Factor */
    float rmsVolt; /* RMS Voltage */
    float rmsAmp; /* RMS Current */
    float rmsWatt; /* RMS Power */
} rem;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define rem_init_default                         {0, 0, 0, 0, 0, 0, 0}
#define rem_init_zero                            {0, 0, 0, 0, 0, 0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define rem_acVolt_tag                           1
#define rem_acAmp_tag                            2
#define rem_acWatt_tag                           3
#define rem_PowerF_tag                           4
#define rem_rmsVolt_tag                          5
#define rem_rmsAmp_tag                           6
#define rem_rmsWatt_tag                          7

/* Struct field encoding specification for nanopb */
#define rem_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, FLOAT,    acVolt,            1) \
X(a, STATIC,   SINGULAR, FLOAT,    acAmp,             2) \
X(a, STATIC,   SINGULAR, FLOAT,    acWatt,            3) \
X(a, STATIC,   SINGULAR, FLOAT,    PowerF,            4) \
X(a, STATIC,   SINGULAR, FLOAT,    rmsVolt,           5) \
X(a, STATIC,   SINGULAR, FLOAT,    rmsAmp,            6) \
X(a, STATIC,   SINGULAR, FLOAT,    rmsWatt,           7)
#define rem_CALLBACK NULL
#define rem_DEFAULT NULL

extern const pb_msgdesc_t rem_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define rem_fields &rem_msg

/* Maximum encoded size of messages (where known) */
#define rem_size                                 35

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
